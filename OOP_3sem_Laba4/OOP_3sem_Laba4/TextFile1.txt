
1. Для чего используют статические классы?
Статические классы используются для создания классов, которые не могут быть созданы как экземпляры.
Они обычно содержат методы и поля, которые относятся ко всему классу, а не к конкретным объектам,
и часто применяются для создания утилитарных или вспомогательных методов, например, для математических операций (как в классе Math).

2. Что может содержать статический класс?
Статический класс может содержать:

Статические методы
Статические поля
Статические свойства
Статические конструкторы Однако статический класс не может содержать нестатических членов или быть наследован.

3. Что такое производный и базовый классы?
Базовый класс — это класс, от которого наследуются другие классы.
Производный класс — это класс, который наследует свойства и методы базового класса. Например, если класс A — это базовый класс, то класс B, наследующий его, является производным.

4. Как используют ключевое слово base?
Ключевое слово base используется в производном классе для вызова конструктора или метода базового класса.
Это позволяет обращаться к членам базового класса, которые могут быть перекрыты в производном классе.

5. В чем заключается основная задача наследования?
Основная задача наследования — повторное использование кода базового класса в производных классах.
Оно позволяет создавать иерархии классов, где производные классы наследуют поля и методы базовых классов, дополняя их или изменяя их поведение.

8. Что такое полиморфизм? Приведите пример.
Полиморфизм — это возможность работы с объектами различных классов через единый интерфейс.
Это основополагающая концепция ООП, которая позволяет методам и объектам принимать разные формы.

9. Определите назначение виртуальных функций.
Виртуальные функции позволяют производным классам переопределять их поведение.
Это даёт возможность использовать полиморфизм, где методы могут изменяться в производных классах, не изменяя базовый класс.

10. Кому доступны переменные с модификатором protected?
Переменные с модификатором protected доступны:
Базовому классу
Производным классам

11. Наследуются ли переменные с модификатором private?
Нет, переменные с модификатором private не наследуются напрямую производными классами.

12. as, is – что это, как применяется? В чем между ними отличие?
is используется для проверки, является ли объект экземпляром определенного типа.
as выполняет приведение типа, но возвращает null, если приведение не удалось (вместо выброса исключения).

13. Поддерживает ли C# множественное наследование?
Нет, C# не поддерживает множественное наследование классов. Однако, можно реализовать множественное наследование через интерфейсы.

14. Можно ли запретить наследование от класса?
Да, можно запретить наследование, используя ключевое слово sealed:

16. Что такое абстрактный класс?
Абстрактный класс — это класс, который не может быть создан как объект. Он может содержать абстрактные методы, которые должны быть реализованы в производных классах.

17. В каком случае вы обязаны объявить класс абстрактным?
Если класс содержит хотя бы один абстрактный метод, то класс должен быть объявлен абстрактным.

18. В чем разница между абстрактными и виртуальными классами? Между виртуальными и абстрактными методами?
Абстрактный класс — это класс, который не может быть инстанцирован и служит только как базовый класс.
Виртуальный метод — метод, который может быть переопределён в производных классах.
Абстрактный метод — это метод, который обязан быть реализован в производных классах.

19. Какие компоненты класса могут быть виртуальными?
Методы, свойства, события и индексаторы могут быть виртуальными.

20. Что такое интерфейс?
Интерфейс — это контракт, который определяет набор методов и свойств, которые должен реализовать класс.

21. Что может содержать интерфейс?
Интерфейс может содержать:
Объявления методов
Объявления свойств
Объявления событий

24. Почему нельзя указать модификатор видимости для методов интерфейса?
Потому что все методы интерфейса по умолчанию являются public, так как интерфейс — это контракт, который должен быть доступен для реализации в классах.

25. Можно ли наследовать от нескольких интерфейсов?
Да, можно наследовать от нескольких интерфейсов:

26. Назовите отличия между интерфейсом и абстрактным классом.
В интерфейсе все методы без реализации, в абстрактном классе могут быть как реализованные, так и нереализованные методы.
Интерфейс не может содержать поля, абстрактный класс может.

27. Для чего используются стандартные интерфейсы ICloneable, IComparable, IComparer, IEnumerable?
ICloneable — для создания копий объектов.
IComparable — для сравнения объектов (обычно для сортировки).
IComparer - для предоставления способов настройки порядка сортировки коллекций
IEnumerable - для предоставления доступа к коллекциям ТОЛЬКО ДЛЯ ЧТЕНИЯ. 